name: Deploy API to Container Apps

on:
  push:
    branches: [main, fresh-start]
    paths:
      - 'api/**'
      - '.github/workflows/container-deploy.yml'
      - 'infra/**'
  workflow_dispatch:

env:
  AZURE_RESOURCE_GROUP: riffinreact-rg
  LOCATION: westus
  ENVIRONMENT_NAME: a-riff-in-react
  EXISTING_SQL_SERVER_RG: db-rg
  EXISTING_SQL_SERVER_NAME: sequitur-sql-server
  EXISTING_SQL_DATABASE_NAME: riff-react-db
  EXISTING_COSMOS_DB_NAME: riff-react-cosmos-db
  EXISTING_COSMOS_DB_RG: db-rg
  ACR_NAME: ariffreactacr
  CORS_ORIGINS: https://a-riff-in-react.harryjamesgreenblatt.com,http://localhost:5173

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Register Azure Resource Providers
        run: |
          echo "Registering required Azure Resource Providers..."
          
          # Register providers (idempotent operations)
          az provider register --namespace Microsoft.App --wait
          az provider register --namespace Microsoft.ContainerRegistry --wait
          az provider register --namespace Microsoft.OperationalInsights --wait
          az provider register --namespace Microsoft.DocumentDB --wait
          az provider register --namespace Microsoft.ManagedIdentity --wait
          az provider register --namespace Microsoft.KeyVault --wait
          az provider register --namespace Microsoft.Insights --wait
          az provider register --namespace Microsoft.Web --wait
          
          echo "✅ All resource providers registered successfully!"
      
      - name: Create resource group if it doesn't exist
        run: |
          if ! az group show --name ${{ env.AZURE_RESOURCE_GROUP }} &> /dev/null; then
            echo "Creating resource group ${{ env.AZURE_RESOURCE_GROUP }}..."
            az group create --name ${{ env.AZURE_RESOURCE_GROUP }} --location ${{ env.LOCATION }}
          else
            echo "Resource group ${{ env.AZURE_RESOURCE_GROUP }} already exists"
          fi
      
      - name: Create Azure Container Registry if it doesn't exist
        run: |
          if ! az acr show --name ${{ env.ACR_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} &> /dev/null; then
            echo "Creating Azure Container Registry..."
            az acr create --name ${{ env.ACR_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --sku Basic --admin-enabled true
          else
            echo "Azure Container Registry already exists"
          fi
          
          # Get ACR credentials
          ACR_USERNAME=$(az acr credential show --name ${{ env.ACR_NAME }} --query username -o tsv)
          ACR_PASSWORD=$(az acr credential show --name ${{ env.ACR_NAME }} --query passwords[0].value -o tsv)
          
          echo "ACR_USERNAME=$ACR_USERNAME" >> $GITHUB_ENV
          echo "::add-mask::$ACR_PASSWORD"
          echo "ACR_PASSWORD=$ACR_PASSWORD" >> $GITHUB_ENV
      
      - name: Login to Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ACR_NAME }}.azurecr.io
          username: ${{ env.ACR_USERNAME }}
          password: ${{ env.ACR_PASSWORD }}
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './api/package-lock.json'
      
      - name: Install API dependencies
        working-directory: ./api
        run: npm ci
        
      - name: Build API
        working-directory: ./api
        run: npm run build
      
      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: ./api
          push: true
          tags: ${{ env.ACR_NAME }}.azurecr.io/a-riff-in-react-api:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Deploy Azure Infrastructure
        uses: azure/arm-deploy@v1
        with:
          scope: resourcegroup
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          template: ./infra/main.bicep
          failOnStdErr: false
          parameters: >
            environmentName=${{ env.ENVIRONMENT_NAME }}
            location=${{ env.LOCATION }}
            containerImage=${{ env.ACR_NAME }}.azurecr.io/a-riff-in-react-api:latest
            containerRegistry=${{ env.ACR_NAME }}.azurecr.io
            containerRegistryUsername=${{ env.ACR_USERNAME }}
            containerRegistryPassword=${{ env.ACR_PASSWORD }}
            jwtSecret=${{ secrets.JWT_SECRET }}
            corsOrigins=${{ env.CORS_ORIGINS }}
            existingSqlServerName=${{ env.EXISTING_SQL_SERVER_NAME }}
            existingSqlServerResourceGroup=${{ env.EXISTING_SQL_SERVER_RG }}
            existingSqlDatabaseName=${{ env.EXISTING_SQL_DATABASE_NAME }}
            existingCosmosDbAccountName=${{ env.EXISTING_COSMOS_DB_NAME }}
            existingCosmosDbResourceGroup=${{ env.EXISTING_COSMOS_DB_RG }}
      
      - name: Setup SQL Managed Identity Access
        run: |
          echo "Setting up SQL database access for managed identity..."
          
          # Get the managed identity principal ID
          PRINCIPAL_ID=$(az identity show \
            --name id-${{ env.ENVIRONMENT_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query principalId -o tsv)
          
          echo "Managed Identity Principal ID: $PRINCIPAL_ID"
          
          # Create SQL script to grant permissions
          cat > /tmp/grant-access.sql << EOF
          -- Create user from managed identity if it doesn't exist
          IF NOT EXISTS (SELECT * FROM sys.database_principals WHERE name = '${PRINCIPAL_ID}')
          BEGIN
              CREATE USER [${PRINCIPAL_ID}] FROM EXTERNAL PROVIDER;
          END
          
          -- Grant database roles
          ALTER ROLE db_datareader ADD MEMBER [${PRINCIPAL_ID}];
          ALTER ROLE db_datawriter ADD MEMBER [${PRINCIPAL_ID}];
          GO
          EOF
          
          echo "Granting SQL database permissions..."
          
          # Execute SQL script using Azure CLI
          # This requires the service principal to have SQL admin permissions
          az sql db execute \
            --server ${{ env.EXISTING_SQL_SERVER_NAME }} \
            --name ${{ env.EXISTING_SQL_DATABASE_NAME }} \
            --resource-group ${{ env.EXISTING_SQL_SERVER_RG }} \
            --scripts @/tmp/grant-access.sql \
            || echo "⚠️ SQL role assignment failed - may need manual setup"
          
          echo "✅ SQL managed identity access configured"
      
      - name: Verify Deployment
        run: |
          echo "Container App URL: $(az containerapp show -n ca-api-${{ env.ENVIRONMENT_NAME }} -g ${{ env.AZURE_RESOURCE_GROUP }} --query properties.configuration.ingress.fqdn -o tsv)"
          echo "Testing health endpoint..."
          HEALTH_URL="https://$(az containerapp show -n ca-api-${{ env.ENVIRONMENT_NAME }} -g ${{ env.AZURE_RESOURCE_GROUP }} --query properties.configuration.ingress.fqdn -o tsv)/health"
          for i in {1..5}; do
            echo "Attempt $i..."
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" $HEALTH_URL || echo "Failed")
            if [ "$STATUS" == "200" ]; then
              echo "✅ Health check passed!"
              break
            else
              echo "❌ Health check failed with status: $STATUS"
              if [ $i -lt 5 ]; then
                echo "Waiting 30 seconds before retry..."
                sleep 30
              fi
            fi
          done
      
      - name: Logout from Azure
        run: az logout
        if: always()
