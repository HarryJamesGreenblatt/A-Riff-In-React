name: Deploy API to Container Apps

on:
  push:
    branches: [main, fresh-start]
    paths:
      - 'api/**'
      - '.github/workflows/container-deploy.yml'
      - 'infra/**'
  workflow_dispatch:

env:
  AZURE_RESOURCE_GROUP: riffinreact-rg
  LOCATION: westus
  ENVIRONMENT_NAME: a-riff-in-react
  EXISTING_SQL_SERVER_RG: db-rg
  EXISTING_SQL_SERVER_NAME: sequitur-sql-server
  EXISTING_SQL_DATABASE_NAME: riff-react-db
  EXISTING_COSMOS_DB_NAME: riff-react-cosmos-db
  EXISTING_COSMOS_DB_RG: db-rg
  ACR_NAME: ariffreactacr
  CORS_ORIGINS: https://a-riff-in-react.harryjamesgreenblatt.com,http://localhost:5173

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Register Azure Resource Providers
        run: |
          echo "Registering required Azure Resource Providers..."
          
          # Register providers (idempotent operations)
          az provider register --namespace Microsoft.App --wait
          az provider register --namespace Microsoft.ContainerRegistry --wait
          az provider register --namespace Microsoft.OperationalInsights --wait
          az provider register --namespace Microsoft.DocumentDB --wait
          az provider register --namespace Microsoft.ManagedIdentity --wait
          az provider.register --namespace Microsoft.KeyVault --wait
          az provider register --namespace Microsoft.Insights --wait
          az provider register --namespace Microsoft.Web --wait
          
          echo "‚úÖ All resource providers registered successfully!"
      
      - name: Create resource group if it doesn't exist
        run: |
          if ! az group show --name ${{ env.AZURE_RESOURCE_GROUP }} &> /dev/null; then
            echo "Creating resource group ${{ env.AZURE_RESOURCE_GROUP }}..."
            az group create --name ${{ env.AZURE_RESOURCE_GROUP }} --location ${{ env.LOCATION }}
          else
            echo "Resource group ${{ env.AZURE_RESOURCE_GROUP }} already exists"
          fi
      
      - name: Create Azure Container Registry if it doesn't exist
        run: |
          if ! az acr show --name ${{ env.ACR_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} &> /dev/null; then
            echo "Creating Azure Container Registry..."
            az acr create --name ${{ env.ACR_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --sku Basic --admin-enabled true
          else
            echo "Azure Container Registry already exists"
          fi
          
          # Get ACR credentials
          ACR_USERNAME=$(az acr credential show --name ${{ env.ACR_NAME }} --query username -o tsv)
          ACR_PASSWORD=$(az acr credential show --name ${{ env.ACR_NAME }} --query passwords[0].value -o tsv)
          
          echo "ACR_USERNAME=$ACR_USERNAME" >> $GITHUB_ENV
          echo "::add-mask::$ACR_PASSWORD"
          echo "ACR_PASSWORD=$ACR_PASSWORD" >> $GITHUB_ENV
      
      - name: Login to Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ACR_NAME }}.azurecr.io
          username: ${{ env.ACR_USERNAME }}
          password: ${{ env.ACR_PASSWORD }}
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './api/package-lock.json'
      
      - name: Install API dependencies
        working-directory: ./api
        run: npm ci
        
      - name: Build API
        working-directory: ./api
        run: npm run build
      
      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: ./api
          push: true
          tags: ${{ env.ACR_NAME }}.azurecr.io/a-riff-in-react-api:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Deploy Azure Infrastructure
        uses: azure/arm-deploy@v1
        with:
          scope: resourcegroup
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          template: ./infra/main.bicep
          failOnStdErr: false
          parameters: >
            environmentName=${{ env.ENVIRONMENT_NAME }}
            location=${{ env.LOCATION }}
            containerImage=${{ env.ACR_NAME }}.azurecr.io/a-riff-in-react-api:latest
            containerRegistry=${{ env.ACR_NAME }}.azurecr.io
            containerRegistryUsername=${{ env.ACR_USERNAME }}
            containerRegistryPassword=${{ env.ACR_PASSWORD }}
            jwtSecret=${{ secrets.JWT_SECRET }}
            corsOrigins=${{ env.CORS_ORIGINS }}
            existingSqlServerName=${{ env.EXISTING_SQL_SERVER_NAME }}
            existingSqlServerResourceGroup=${{ env.EXISTING_SQL_SERVER_RG }}
            existingSqlDatabaseName=${{ env.EXISTING_SQL_DATABASE_NAME }}
            existingCosmosDbAccountName=${{ env.EXISTING_COSMOS_DB_NAME }}
            existingCosmosDbResourceGroup=${{ env.EXISTING_COSMOS_DB_RG }}
      
      - name: Setup SQL Managed Identity Access
        run: |
          echo "========================================="
          echo "SQL Managed Identity Access Setup"
          echo "========================================="
          
          # Get the managed identity principal ID
          PRINCIPAL_ID=$(az identity show \
            --name id-${{ env.ENVIRONMENT_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query principalId -o tsv)
          
          echo "‚úì Managed Identity Principal ID: $PRINCIPAL_ID"
          echo ""
          
          # Create SQL script
          cat > /tmp/grant-access.sql << EOF
          IF NOT EXISTS (SELECT * FROM sys.database_principals WHERE name = '${PRINCIPAL_ID}')
          BEGIN
              CREATE USER [${PRINCIPAL_ID}] FROM EXTERNAL PROVIDER;
              PRINT 'Created user for managed identity';
          END
          ELSE
          BEGIN
              PRINT 'User already exists';
          END
          
          IF IS_ROLEMEMBER('db_datareader', '${PRINCIPAL_ID}') = 0
          BEGIN
              ALTER ROLE db_datareader ADD MEMBER [${PRINCIPAL_ID}];
              PRINT 'Added db_datareader role';
          END
          
          IF IS_ROLEMEMBER('db_datawriter', '${PRINCIPAL_ID}') = 0
          BEGIN
              ALTER ROLE db_datawriter ADD MEMBER [${PRINCIPAL_ID}];
              PRINT 'Added db_datawriter role';
          END
          
          PRINT 'SQL permissions configured successfully';
          EOF
          
          echo "Attempting automated SQL role assignment..."
          echo ""
          
          # Try automated setup using Azure AD authentication
          if az sql db execute \
            --server ${{ env.EXISTING_SQL_SERVER_NAME }} \
            --database ${{ env.EXISTING_SQL_DATABASE_NAME }} \
            --resource-group ${{ env.EXISTING_SQL_SERVER_RG }} \
            --auth-type ADPassword \
            --file /tmp/grant-access.sql 2>&1; then
            
            echo ""
            echo "========================================="
            echo "‚úÖ SQL PERMISSIONS CONFIGURED AUTOMATICALLY"
            echo "========================================="
            echo "The managed identity has been granted:"
            echo "  ‚Ä¢ db_datareader role"
            echo "  ‚Ä¢ db_datawriter role"
            echo ""
            
          else
            
            echo ""
            echo "========================================="
            echo "‚ö†Ô∏è  AUTOMATED SETUP FAILED - MANUAL SETUP REQUIRED"
            echo "========================================="
            echo ""
            echo "The automated SQL role assignment failed."
            echo "This is expected if the GitHub service principal"
            echo "doesn't have SQL admin permissions."
            echo ""
            echo "Please run these commands manually (one-time setup):"
            echo ""
            echo "Option 1: Azure Cloud Shell (Recommended)"
            echo "-------------------------------------------"
            echo "1. Open https://shell.azure.com"
            echo "2. Run: sqlcmd -S ${{ env.EXISTING_SQL_SERVER_NAME }}.database.windows.net -d ${{ env.EXISTING_SQL_DATABASE_NAME }} -G"
            echo "3. Execute:"
            echo ""
            echo "   CREATE USER [${PRINCIPAL_ID}] FROM EXTERNAL PROVIDER;"
            echo "   ALTER ROLE db_datareader ADD MEMBER [${PRINCIPAL_ID}];"
            echo "   ALTER ROLE db_datawriter ADD MEMBER [${PRINCIPAL_ID}];"
            echo "   GO"
            echo ""
            echo "Option 2: Azure Data Studio"
            echo "-------------------------------------------"
            echo "1. Connect to: ${{ env.EXISTING_SQL_SERVER_NAME }}.database.windows.net"
            echo "2. Database: ${{ env.EXISTING_SQL_DATABASE_NAME }}"
            echo "3. Authentication: Azure Active Directory"
            echo "4. Execute the SQL commands above"
            echo ""
            echo "Option 3: Grant GitHub SP SQL Admin Access"
            echo "-------------------------------------------"
            echo "To enable automated setup in future deployments:"
            echo ""
            echo "az sql server ad-admin create \\Êïñ
            echo "  --server ${{ env.EXISTING_SQL_SERVER_NAME }} \\
            echo "  --resource-group ${{ env.EXISTING_SQL_SERVER_RG }} \\
            echo "  --display-name 'GitHub Actions SP' \\
            echo "  --object-id \$(az ad sp list --display-name 'GitHub Actions' --query '[0].id' -o tsv)"
            echo ""
            echo "========================================="
            echo "üìù See docs/Auth/SQL-MANAGED-IDENTITY-SETUP.md for details"
            echo ""
            echo "‚ö†Ô∏è  Note: API will not be able to access database until this is completed"
            echo ""
            
          fi
      
      - name: Verify Deployment
        run: |
          echo "Container App URL: $(az containerapp show -n ca-api-${{ env.ENVIRONMENT_NAME }} -g ${{ env.AZURE_RESOURCE_GROUP }} --query properties.configuration.ingress.fqdn -o tsv)"
          echo "Testing health endpoint..."
          HEALTH_URL="https://$(az containerapp show -n ca-api-${{ env.ENVIRONMENT_NAME }} -g ${{ env.AZURE_RESOURCE_GROUP }} --query properties.configuration.ingress.fqdn -o tsv)/health"
          for i in {1..5}; do
            echo "Attempt $i..."
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" $HEALTH_URL || echo "Failed")
            if [ "$STATUS" == "200" ]; then
              echo "‚úÖ Health check passed!"
              break
            else
              echo "‚ùå Health check failed with status: $STATUS"
              if [ $i -lt 5 ]; then
                echo "Waiting 30 seconds before retry..."
                sleep 30
              fi
            fi
          done
      
      - name: Logout from Azure
        run: az logout
        if: always()
